#!/bin/bash -e

node {

  // Mark the code checkout 'Checkout'....
  stage 'Checkout'

  env.PATH = "${env.PATH}" {

          // Mark the code build 'plan'....
          stage name: 'Plan', concurrency: 1
          // Output Terraform version
          sh "terraform --version"
          //Remove the terraform state file so we always start from a clean state
          if (fileExists("enviornment/test/.terraform/terraform.tfstate")) {
              sh "rm -rf enviornment/test/.terraform/terraform.tfstate"
          }
          if (fileExists("status")) {
              sh "rm status"
          }
          sh "./init"
          sh "terraform get"
          sh "echo \$PWD"
          sh "whoami"
          sh "terraform plan -out=plan.out;echo \$? > status"
          def exitCode = readFile('status').trim()
          def apply = false
          echo "Terraform Plan Exit Code: ${exitCode}"
          if (exitCode == "0") {
              echo "Terraform Plan Exit Code: ${exitCode}"
              slackSend channel: '#midwesthackerschool', color: '#0080ff', message: "Plan Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
              currentBuild.result = 'SUCCESS'
          }
          if (exitCode == "1") {
              sh "terraform destroy -force"
              echo "Terraform Plan Exit Code: ${exitCode}"
              slackSend channel: '#midwesthackerschool', color: '#0080ff', message: "Infrastructure Destroyed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
              currentBuild.result = 'FAILURE'
          }
          if (exitCode == "0") {
              echo "Terraform Plan Exit Code: ${exitCode}"
              //stash name: "plan", includes: "plan.out"
              slackSend channel: '#midwesthackerschool', color: 'good', message: "Plan Awaiting Approval: ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
              try {
                  input message: 'Apply Plan?', ok: 'Apply'
                  apply = true
              } catch (err) {
                  slackSend channel: '#midwesthackerschool', color: 'warning', message: "Plan Discarded: ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
                  apply = false
                  sh "terraform destroy -force"
                  currentBuild.result = 'UNSTABLE'
              }
          }
          if (apply) {
              stage name: 'Apply', concurrency: 1
              //unstash 'plan'
              if (fileExists("status.apply")) {
                  sh "rm status.apply"
              }
              sh 'terraform apply;echo \$? > status.apply'
              def applyExitCode = readFile('status.apply').trim()
              if (applyExitCode == "0") {
                  slackSend channel: '#midwesthackerschool', color: 'good', message: "Changes Applied ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
              } else {
                  slackSend channel: '#midwesthackerschool', color: 'danger', message: "Apply Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} ()"
                  sh "terraform destroy -force"
                  currentBuild.result = 'FAILURE'
              }
          }
      }
}
